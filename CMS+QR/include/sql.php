<?php
      ####################################################
      ####################################################
      ###                                              ###
      ###  # # # # # # # # # # # # # # # # # # # #     ###
      ###   # # # # # # # # # # # # # # # # # # # #    ###
      ###    # # # # # # # # # # # # # # # # # # # #   ###
      ###     #     WDGSS Required File     # # # # #  ###
      ###    # Please No Change In This File # # # #   ###
      ###   # # # # # # # # # # # # # # # # # # # #    ###
      ###  # # # # # # # # # # # # # # # # # # # #     ###
      ###                                              ###
      ####################################################
      ####################################################
      ### WARNING DO NOT EDIT THIS FILE, THAT MISMATCH ###
      ### THE USABILITY OF WDGSS, WE DO NOT GIVE ----- ###
      ### SUPPORT FOR EDITTED FILES!!!!!!!!!!!!!!!!!!! ###
      ####################################################
      ####################################################
	  ### STARTED BY: Wesley De Groot (wes@wdgss.nl)   ###
	  ### FILE VERSION: 6.0.0.1-25                     ###
	  ### WDGSS VERSION: 6.0.0.1 Final                 ###
      ####################################################
	  ### LAST EDIT BY: Wesley De Groot (wes@wdgss.nl) ###
	  ### LAST REVISION: 20:12 @ 15 / 09 / 2010        ###
	  ####################################################
	  ####################################################















if ( !defined ( 'in_wdgss' ) )
 {
  exit("You`ll Missed This Action");
 }
 
 # Mysql Class
 	function secure($str)
 	{
  		return mysql_real_escape_string($str); 
 	}   

	function nldate ( $date ) 
		{
			#$date = 2010-07-17 09:39:54
			preg_match_all('/(.*)-(.*)-(.*) (.*):(.*):(.*)/', $date, $r);
			return $r[3][0] . '-' . $r[2][0]  . '-' . $r[1][0] . ' ' . $r[4][0] . ':' . $r[5][0] . ':' . $r[6][0];
		}
	
	function age($birthDate) {
		
		global $lang;
		
		if ( preg_match ( "#[1|2][0-9][0-9][0-9]-(.*)-(.*)#", $birthDate ) )
			list($year, $month, $day) = explode('-', $birthDate);
		Else
			list($day, $month, $year) = explode('-', $birthDate);
		
		$ageOfPerson = date('Y') - $year;
		$notBorn 	= $lang['age']['notborn'];
		$bornToday 	= $lang['age']['borntoday'];
		$birthDay 	= sprintf($lang['age']['today'], $ageOfPerson);
		if (($year > date('Y')) || ($year == date('Y') && $month > date('m')) || ($year == date('Y') && $month == date('m') && $day > date('d'))) {
			$ageOfPerson = $notBorn;
		}
		elseif ($year == date('Y') && $month == date('m') && $day == date('d')) {
			$ageOfPerson = $bornToday;
		}
		elseif ($year < date('Y') && $month == date('m') && $day == date('d')) {
			$ageOfPerson = $birthDay;
		}
		else {
			if ($month > date('m')) {
				$ageOfPerson--;
			}
			if ($month == date('m') && $day > date('d')) {
				$ageOfPerson--;
			}
			$ageOfPerson .= ' ' . $lang['age']['year'];
		}
		return $ageOfPerson;
	}

	function strip($stringvar)
		{
			if (1 == get_magic_quotes_gpc())
				{
					$stringvar = stripslashes($stringvar);
				}
			return $stringvar;
		}  	

class database
{
public function __construct ($debug = false)
	{
		$this -> debugen   = $debug;
		$this -> lastquery = 'none';
		$this -> querys    = 0;
	} 
  
public function __destruct()
	{
		if ( $this -> connected() )
			{
			if ( $this -> connection )
				{
					@mysql_close($this -> connection);
				}
			}
	}
  
public function secure($str)
 	{
  		return mysql_real_escape_string($str); 
 	} 
 	
//$sql['text']
function strip($stringvar)
	{
		if (1 == get_magic_quotes_gpc())
		{
			$stringvar = stripslashes($stringvar);
		}
		return $stringvar;
	}  	


function help()
	{
   return "

//import
\$conf['database']['db'] -> import ( 'import.to.test.sql' ) ; // if file exists then it will be imported
\$conf['database']['db'] -> import ( 'update `login`=\'false\' from `users`'); // a query more can be add to do query0;query1;qery2;  [ext]

\$do = \$conf['database']['db']->query(\"select * from `wes`;\");
\$doe = \$conf['database']['db']->fetch(\$do,'array');
echo ( dump ( array ( \$doe  ) ) );

echo \$conf['database']['db'] -> update ( 'wes' , array ( 'blah' => 'value' ) , '1' );
                ///  table   rows                           where [limit]
               ";

  }

function connected()  
	{
		if ( isset ( $this -> connection ) )
			{
				if ( $this -> connection != 'error' )
					{
						return true;
					}
				else
					{
						return false;
					}
			}
		else
			{
				return false;
			}
	}
  
  function database()
  {
   if ( isset ( $this -> dbp ) )
   {
    if ( $this -> dbp != 'error' )
    {
     return true;
    }
    else
    {
     return false;
    }
   }
   else
   {
    return false;
   }
  }
  
  function debug ( $twes, $what )
  {
   if ( $this -> debugen == true)
   {
     if ( !isset ( $this -> debug ) )
     {
       $this -> debug = array();
     }
     $this -> debug[$twes] = $what;
   }
  }
  
  
  function dumpdebug ( $what = 0 )
  {
  if ($what == 'str' || $what == 'string')
  {
   if ( isset ( $this -> debug ) )
   {
     $ret=null;
     foreach($this -> debug As $x => $y) 
     {
      $ret .= println($x . '=>' . $y,'ret');
     }
     return $ret;
   }
   else
   {
     return ($this -> debugen == true) ? null : 'debug is disabled';
   } 
  }
  else
  {
   if ( isset ( $this -> debug ) )
   {
     return $this -> debug;
   }
   else
   {
     return ($this -> debugen == true) ? array(null) : array('debug is disabled');
   } 
   }
  }
  
  function mmysql_error()
  {
   if ( $this -> check ( ) )
   { 
     if ( mysql_error() != "" && mysql_error() != " " )
     {
      return mysql_error();
     }
     else
     {
      return null;
     }
   }
   else
   {
    if ( $this -> connected() && !$this -> database())
    {
     return 'er is geen database geselecteerd';
    }
    elseif ( !$this -> connected() && $this -> database())
    {
     return 'er is geen server geselecteerd';
    }
    else
    {
     return 'er is geen database en server geselecteerd...';
    }
   }
  }
  
  function check()
  {
   return ( $this -> connected ( ) && $this -> database( ) ) ? true : false;
  }
  
  function connect($user,$pass,$host='localhost')
  {
   if ( $ssqqll = @mysql_connect ( $host, $user, $pass ) ) {
     $this -> connection = $ssqqll;
     $connected=true;
    }
    else
    {
     $this -> connection = 'error';
     $connected=false;
    }
    
    $this -> debug ( 'Connect.', array ( 'user' => $user, 'pass' => $pass, 'host' => $host, 'connected' => (($connected)?'true':'false'), 'resource' => $this -> connection, 'mysql_error' => $this -> mmysql_error() ) );
    return $connected;
  }
  
  function select($db)
  {
    if ( $this -> connected() )
    {
      if ( $ssqqll = @mysql_select_db ( $db, $this->connection ) ) {
       $this -> dbp = $db;
       $this -> db  = $ssqqll;
       $connected   = true;
      }
      else
      {
       $this -> db  = 'database "' . $db . '" Bestaat niet';
       $this -> dbp = 'error';
       $connected   = false;
      }
      $this -> debug ( 'database', array ( 'connection' => $this -> connection, 'connected' => (($this -> connected())?'true':'false'), 'database' => $db, 'connected' => (($connected)?'true':'false'), 'resource' => $this -> db, 'mysql_error' => $this -> mmysql_error() ) );
      return $connected;
    }
    else
    {
     $this -> debug ( 'select database', array ( 'connection' => null, 'connected' => (($this -> connected())?'true':'false'), 'database' => $db, 'connected' => 'false', 'resource' => null, 'mysql_error' => $this -> mmysql_error() ) );
     echo ('Select First a server!');
    }
  }
  function query ( $sql, $x = false )
  {
   if ( !isset ( $this -> query_tel ) )
   {
    $this -> query_tel = 1;
   }
   else
   {
    $this -> query_tel++;
   }
   $this -> querys++;
   $this -> lastquery = $sql;
   
   if ( $x != true )
   {
   if ( $this -> check( ) )
   {
     if ( $exec = @mysql_query ( $sql , $this->connection ) )
     {
       $this -> debug ( 'query[' . $this -> query_tel . ']', array ( 'connection' => $this -> connection, 'database' => $this -> dbp, 'query' => $sql, 'done' => true, 'mysql_error' => $this -> mmysql_error() ) );
       return $exec;
     }
     else
     {
       $this -> debug ( 'query[' . $this -> query_tel . ']' , array ( 'connection' => $this -> connection, 'database' => $this -> dbp, 'query' => $sql, 'done' => false, 'mysq_error' => $this -> mmysql_error() ) ) ;
       return "Er is een mysql error gekomen:<br>details: <br />Query: " . $sql . "<br />Error: " . mysql_error();
     }
   }
   else
   {
    $this -> debug ( 'query[' . $this -> query_tel . ']' , array ( 'connection' => null, 'database' => 'none', 'query' => $sql, 'done' => false, 'mysql_error' => $this -> mmysql_error() ) ) ;
    echo ('not connected to a database!');
   }
  }
  else
  {
     if ( $exec = @mysql_query ( $sql , $this->connection ) )
     {
       $this -> debug ( 'query[' . $this -> query_tel . ']', array ( 'connection' => $this -> connection, 'database' => ((isset($this -> dbp)?($this -> dbp):null)), 'query' => $sql, 'done' => true, 'mysql_error' => $this -> mmysql_error() ) );
       return $exec;
     }
     else
     {
       $this -> debug ( 'query[' . $this -> query_tel . ']' , array ( 'connection' => $this -> connection, 'database' => $this -> dbp, 'query' => $sql, 'done' => false, 'mysq_error' => $this -> mmysql_error() ) ) ;
       return "Er is een mysql error gekomen:<br>details: <br />Query: " . $sql . "<br />Error: " . mysql_error();
     }
  }
  }
  
  function num($what,$type="row",$subtype=MYSQL_ASSOC)
  {
    if ( !isset ( $this -> num ) )
    {
     $this -> num = array();
    } 
    if ( !isset ( $this->num[$type]) )
    {
     $this -> num[$type] = 1;
    }
    else
    {
     $this -> num[$type] ++;
    }
    
    if ( $this -> check( ) )
    {
      switch ( $type ) 
      {
        case 'row':
        case 'rows':
          $do = @mysql_num_rows($what);
        break;
        
        case 'field':
        case 'fields':
          $do = @mysql_num_fields($what);
        break;
      }
            $this -> debug ( 'num.' . $type . '[' . $this -> num[$type] . ']' , array ( 'connection' => $this -> connection, 'database' => $this -> dbp, 'num' => $type, 'o_res' => $what, 'type' => $subtype, 'done' => (($do)?'true':'false'), 'resource' => $do, 'mysql_error' => $this -> mmysql_error() ) ) ;

      if ( $do )
      {
       return $do;
      }
      else
      {
       return $what . " is not a valid mysql resource";
      }
    }
    else
    {
     $this -> debug ( 'num.' . $type . '[' . $this -> num[$type] . ']' , array ( 'connection' => null, 'database' => null, 'num' => $type, 'o_res' => $what, 'type' => $subtype, 'done' => 'false', 'resource' => null, 'mysql_error' => $this -> mmysql_error() ) ) ;
     echo ('not connected to a database!');
    }
  }
  
  function listit($type="tables")
  {
    if ( !isset ( $this -> listt ) ) 
    {
     $this -> listt = array();
    }
    if ( !isset ( $this -> listt[$type] ) )
    {
     $this -> listt[$type] = 1;
    }
    else
    {
     $this -> listt[$type]++;
    }
    
    switch ( $type ) 
    {
      case 'table':
      case 'tables':
        if ( $this -> check( ) )
        {
         $do = array();
         $tablesResult = @mysql_query($q = "SHOW TABLES FROM `{$this->dbp}`;",$this->connection);
         while ($row = @mysql_fetch_row($tablesResult))
         {
          $do[] = $row[0];
         }
         
         $this -> debug ( 'list.' . $type . '[' . $this -> listt[$type] . ']', array ( 'connection' => $this -> connection, 'connection' => $this -> connection,'database' => $this -> dbp, 'tables' => implode(",",$do), 'done' => (isset($do)?'true':'false'), 'mysql_error' => $this -> mmysql_error() ) ) ;

        }
        else
        {
         $this -> debug ( 'list.' . $type . '[' . $this -> listt[$type] . ']', array ( 'connection' => null, 'connection' => null, 'database' => null, 'tables' => null, 'done' => false, 'mysql_error' => $this -> mmysql_error() ) ) ;
         echo ( 'not connected to databse / server ...' );
        }
      break;
      
      case 'db':
      case 'dbs':
      case 'database':
      case 'databases':
        if ( $this -> connected ( ) )
        {
          $dow = @mysql_list_dbs($this->connection);
          $q   = "@mysql_list_dbs(\$this->connection);"; 
          $i   = 0;
          $do  = array();
          $cnt = mysql_num_rows($dow);
            while ($i < $cnt) {
              $do[] = mysql_db_name($dow, $i);
              $i++;
            }
            $this -> debug ( 'list.' . $type . '[' . $this -> listt[$type] . ']', array ( 'connection' => $this -> connection, 'databases' => implode(",",$do), 'done' => (isset($do)?'true':'false'), 'mysql_error' => null ) ) ;
        }
        else
        {
          $this -> debug ( 'list.' . $type . '[' . $this -> listt[$type] . ']', array ( 'connection' => null, 'databases' => null, 'done' => 'false', 'mysql_error' => $this -> mmysql_error() ) ) ;
          echo ( ' not connected to server... ' ); 
        }
      break;
    }
    if ( isset ($do) && $do )
    {
     return $do;
    }
    else
    {
     return " Uknown error??? <br />(Q: $q)<br/>" . $this -> mmysql_error();
    }
  }

  function WDGSS_import ( $e, $_f )
  {
	$f = file_get_contents($e);
	$f = explode ( "\n", $f ) ;
	$a = null;
	$x = ( sizeof ( $f ) - 1 );
	for ( $i = 0; $i < sizeof ( $f ) ; $i++ )
	 {
		$e = explode(",", $f[$i]);
		@list ( $name, $what, $length, $auto, $comment ) = $e;
		$comma = ( $i < $x ) ? ',' : null;
		if ( $name == "TABLE" )
			{ 
			 $a .= "CREATE TABLE `{$what}` (\n";
			 $end= ") ENGINE = MYISAM COMMENT = '{$length}';";
			}
		elseif ( $name == "-" Or $name == "#USE" or preg_match("/#/", $name ) ) 
			{
				if ( $name == "#USE" or preg_match("/#/", $name ) )
					{
						#  | C O M E S | L A T E R |  #
					}
				else
					{
						# S E P O R A T O R
					}
			}
		else 
			{
				#FIX
				$what = strtoupper($what);

				if ( $auto == 'auto' ) 
				{
					$a .= "`{$name}` {$what}( {$length} ) NOT NULL AUTO_INCREMENT COMMENT '{$comment}'{$comma}\n";
					$den = "PRIMARY KEY ( `{$name}` )\n";
					$x++;
				}
				elseif ( $what == 'INT' Or $what == 'VARCHAR' ) 
				{
					$a .= "`{$name}` {$what}( {$length} ) NOT NULL COMMENT '{$comment}'{$comma}\n";
				}
				elseif ( $what == 'DATE' Or $what == 'DATETIME' Or $what == 'TEXT' )
				{
					$a .= "`{$name}` {$what} NOT NULL COMMENT '{$comment}'{$comma}\n";
				}
			}
	 }
	 
	 if ( isset ( $den ) )
		$a .= $den;
	 
	 if ( isset ( $end ) ) 
		$a .= $end;
	return $a;  
  }
  
  function SQL_import ( $e, $_f )
  {
  
  if(file_exists($e))
   {
    $i = file_get_contents ( $e ) ;
    if(!isset($i))
    {
		$i = readfile($e);  
    }
    if(!isset($i))
    {
        $a = fopen ( $e, 'r' ) ;
		$i = fread ( $a, filesize($e) ) ;
		fclose($a);
    }
    if (!isset($i) Or empty($i))
    {
    		$this -> debug ( 'import' , array ( 'connection' => $this -> connection, 'database' => $this -> dbp, 'o_res' => (isset($what)?$what:null), 'done' => (($do=false)?'true':'false'), 'resource' => $do, 'file_error' => 'Can`t Load \''. $e . '\'!' ) ) ;
    }
	$e = $i;
    }

    if ($_f)
		{
			$valz = $this->listit('table');
			for($i=0; $i<sizeof($valz); $i++) 
			{
//				$sql	= "TRUNCATE `" . $valz[$i] . "`;";
//				@mysql_query ( $sql , $this->connection );
//				$sql	=     "DROP `" . $valz[$i] . "`;";
//				@mysql_query ( $sql , $this->connection );
			}
		}

	$q = array();
	$x = explode("\n",$e);
	$z = sizeof($x);
	
	for ( $i=0; $i<$z; $i++ )
		{
			$r = $x[$i];
			$f = substr($x[$i],0,1);
			if ( $f != "#" && $f != "-" && $r != " " && $r != "  " && !empty($r) ) //wdgsscomment
			{
				$q[] = $x[$i];
			}
		}

	$x = $q;
	#FIX?
	$x = implode ( null, $x);
	$x = explode ( ";", $x );
    #EOFF?
    $z = sizeof($x);
	for ( $i=0; $i<$z; $i++ )
	{
	   $sql = $x[$i] ; // . ";";
	   if ( !isset ( $this -> query_tel ) )
		   {
				$this -> query_tel = 1;
		   }
	   else
		   {
				$this -> query_tel++;
		   }
	   
	   $this -> lastquery = $sql;
		
	   if ( $this -> check ( ) )
		{
		 if ( $exec = @mysql_query ( $sql , $this->connection ) )
			 {
			   $this -> debug ( 'query[' . $this -> query_tel . ']', array ( 'connection' => $this -> connection, 'database' => $this -> dbp, 'query' => $sql, 'done' => true, 'mysql_error' => $this -> mmysql_error() ) );
			 }
		 else
			 {
			   $this -> debug ( 'query[' . $this -> query_tel . ']' , array ( 'connection' => $this -> connection, 'database' => $this -> dbp, 'query' => $sql, 'done' => false, 'mysq_error' => $this -> mmysql_error() ) ) ;
			 }
		}
			else
		{
			$this -> debug ( 'query[' . $this -> query_tel . ']' , array ( 'connection' => null, 'database' => 'none', 'query' => $sql, 'done' => false, 'mysql_error' => $this -> mmysql_error() ) ) ;
		}
	}
  }
  
function import ( $e, $_f = true ) 
{
  if ( file_exists($e) )
	{
		$f = file_get_contents($e);
		$f = explode ( "\n", $f ) ;
		$f = explode(",", $f[1])  ;

		if ( isset ( $f[0] ) && isset ( $f[1] ) && isset ($f[2]) )
			{
				ECHO "WDGSS";
				return $this -> query ( $this -> WDGSS_import ( $e , $_f ) ) ;
			}
		else
			{
				ECHO "SQL";
				return $this -> SQL_import ( $e, $_f ) ;
			}
	}
	else
	{
		return "ERROR:FILE DOES NOT EXISTS!";
	}
}

  
function unique ( ) 
  {
	return substr(md5(uniqid(time())),0,20);
  }
  
  function backup ( $sendit = false )
  {
    if ( $this -> check( ) )
    {
          $starttime = microtime();
          $startarray = explode(" ", $starttime);
          $starttime = $startarray[1] + $startarray[0];

          //query to recive table names 
          $query = mysql_query('SHOW TABLE STATUS') or die(mysql_error()); 
          $sql_backup = ''; 

          $unique = substr(md5(uniqid(time())),0,20); 
          $nl = "\n";
          $sql_backup .= '#########################################' . $nl . '######## WesDeGroot Site System #########' . $nl . 
          '########       MySql Dump       #########' . $nl . '### © WesDeGroot Projects, 2001-' . date('Y') . ' ###' . $nl . 
          '####       All rights Reserved       ####' . $nl . '#########################################' . $nl . 
          '#### Backup id: '  .  $unique  .   ' ####' . $nl . '#### Date/Time: ' . date ('d_m_Y, H:i:s') . ' ####' . $nl . 
          '#### Date/Time is in d m yyyy h m s  ####' . $nl . '#########################################' . $nl . $nl;
          $sql_backup .= '#TABLE: "' . $this -> dbp . '"' . $nl . $nl;
          
          //whileloop to loop trough every table 
          $tables = 0;
          $values = 0;
          while($row = mysql_fetch_assoc($query))
          { 
              $tables++;
              //show sql query to rebuild the query 
              $sql = 'SHOW CREATE TABLE '.$row['Name'].''; 
              //exucte error or give a error 
              $query2 = mysql_query($sql) or die(mysql_error()); 
              
              //create sql 
              $sql_backup.="\r\n#Create table \"" . $row['Name'] . "\"\r\n#table \"" . $row['Name'] . "\"\r\n\r\n"; 
              $sql_backup.="DROP TABLE IF EXISTS `" . $row['Name'] . "`;\r\n";
              $out = mysql_fetch_assoc($query2); 

              $sql_backup.=$out['Create Table'].";\r\n\r\n"; 
              $sql_backup.="#Dump data From \"" . $row['Name'] . "\"\r\n\r\n"; 

              //SQL code to select everything for table 
              $sql = 'SELECT * FROM '.$row['Name']; 
              $out = mysql_query($sql); 
              $sql_code = ''; 

              //loop trough the colloms 
              while($code = mysql_fetch_array($out,MYSQL_ASSOC))
              {  
                  $values++;
                  $sql_code .= "INSERT INTO ".$row['Name']." SET "; 
                  
                  foreach($code as $insert => $value)
                  { 
					  $value    = preg_replace("#'#","\\'",$value);
					  $value    = preg_replace("#\n#","\\n",$value);
                      $sql_code.= "`" . $insert . "`='".$value."',"; 
                  } 
                  $sql_code = substr($sql_code, 0, -1); 
                  $sql_code.= ";\r\n"; 
              } 
              $sql_backup.= $sql_code; 
              $sql_backup.="\r\n#Dump data From \"" . $row['Name'] . "\" Done\r\n# End Of table \"".$row['Name']."\"\r\n"; 
          } 

          $sql_backup.="\r\n#Mysql Dump Compleated dumped total \"" . $tables . "\" tables with \"" . $values . "\" Values\r\n"; 
          $dduummpp = "total \"" . $tables . "\" tables with \"" . $values . "\" Values";

          $endtime   = microtime();
          $endarray  = explode(" ", $endtime);
          $endtime   = $endarray[1] + $endarray[0];
          $totaltime = $endtime - $starttime; 
          $totaltime = round($totaltime,5);

          $sql_backup.="\r\n#Mysql Dump Time Total: " . $totaltime . " Ms \r\n"; 

          $this -> debug ( 'backup' , array ( 'mysql resource' => $this -> connection, 'database' => $this -> dbp, 'dumped' => $dduummpp, 'time (ms)' => $totaltime,'mysql_error' => $this -> mmysql_error() ) );
          if ( $sendit == true )
          {
            if ( !headers_sent($file,$line) ) 
            {
                header('Cache-control: private');
                header('Content-Type: application/octet-stream');
                header('Content-Length: '.strlen($sql_backup));
               $download_file = "Mysql.backup." . date ( "d.m.Y_H.i.s" ) . ".sql";
                header('Content-Disposition: filename='.$download_file);
               echo $sql_backup;
               exit;
            }
            else
            {
              $this -> debug ( 'backup' , array ( 'mysql resource' => $this -> connection, 'faild' => 'headers are send already!', 'database' => $this -> dbp, 'mysql_error' => $this -> mmysql_error() ) );
              return 'error headers are send already';
            }
          }
          else
          {
           return $sql_backup;
          }
    }
    else
    {
      $this -> debug ( 'backup', array ( 'connection' => null, 'database' => null, 'faild' => $this -> mmysql_error(), 'done' => 'false', 'resource' => null, 'mysql_error' => $this -> mmysql_error() ) ) ;
      echo $this -> mmysql_error() ;
    }
  }

  function fetch($what,$type="array",$subtype=MYSQL_ASSOC)
  {
    if ( !isset ( $this -> fetchh ) ) 
    {
     $this -> fetchh = array();
    }
    if ( !isset ( $this -> fetchh[$type] ) )
    {
     $this -> fetchh[$type] = 1;
    }
    else
    {
     $this -> fetchh[$type]++;
    }
    if ( $this -> check( ) )
    {
      switch ( $type ) 
      {
          case 'ob':
          case 'obj':
          case 'object':
          case 'class':
            $doo = mysql_fetch_object($what);
          break;
          
          case 'row':
            $do = mysql_fetch_row($what);
          break; 
          
          case 'array':
            $do = null;
          break;
          
          default:
            $type = "array";
            $do = @mysql_fetch_array($what, MYSQL_ASSOC);       
        }
      $odo = $what;
      if ($type == "array")
      {
        unset($do);
        $do=array();
        while ($row = @mysql_fetch_array($odo, MYSQL_ASSOC)) {
          $do[] = $row;
        }

      }
      
      $this -> debug ( 'fetch.' . $type . '[' . $this -> fetchh[$type] . ']', array ( 'connection' => $this -> connection, 'database' => $this -> dbp, 'done' => (isset($do)?'true':'false'), 'resource' => $do, 'mysql_error' => $this -> mmysql_error() ) ) ;

      if ( $do )
      {
       return $do;
      }
      else
      {
       if ( $this -> mmysql_error() == "" Or $this -> mmysql_error() == null Or $this -> mmysql_error() == " " )
       {
        return "the table is empty!";
       }
       else
       {
        return $what . " is not a valid mysql resource (" . $this -> mmysql_error() . ")";
       }
      }
    }
    else
    {
      $this -> debug ( 'fetch.' . $type . '[' . $this -> fetchh[$type] . ']', array ( 'connection' => null, 'database' => null, 'done' => 'false', 'resource' => null, 'mysql_error' => $this -> mmysql_error() ) ) ;
      return 'error';
    }
  }
  
  public function id ( ) 
  {
    return @mysql_insert_id ( $this -> connection ) ;
  }
  
  function update ( $table, $array, $where, $limit = 1000 ) 
  {
   $qu = 'UPDATE `'.$table.'` SET ';
   $ww = '0';
   foreach ( $array as $i => $w )
   {
    $qu .= '`' . $i . '` = \'' . $w . '\', ';
    $ww  = '1';  
   }
   if ( $ww == '1' )
   {
   $qu = substr($qu,0, (strlen($qu) - 2));
   }
   $qu .= ' WHERE ' . $where . ' LIMIT ' . $limit. ';';
   return $this -> query ( $qu ) ;
  }
  
  function total() 
  {
   return $this -> querys;
  }
}

#LOAD CONFIG

$conf['database']['db'] = new database(true);
$dbd = $conf['database']['db']->connect($conf['database']['user'],$conf['database']['pass'],$conf['database']['host']);
if ( !$conf['database']['db'] -> connected() ) 
{
 					@include "lang/en.php";

 exit($lang['sql']['connect'] . '<br>Debug: ' . dumpdebug(array(
 "User" => $conf['database']['user'],
 "Host" => $conf['database']['host']
 )
 ));
}
else
{
$conf['database']['connected'] = true;
}
$dbe = $conf['database']['db']->select($conf['database']['data']);
$conf['database']['resource'] = $conf['database']['db'];
if ( !$conf['database']['db'] -> database( ) ) {
 exit($lang['SQL']['DBERROR']);
}

# CONFIG FROM SQL
# $conf['database']['pref']
# USAGE X_CONF
 # guestbook:email=1
 # 2 $conf['guestbook']['email']=1;
 
 #run It Now:
 
$do  = $conf['database']['db']->query("SELECT * FROM `{$conf['database']['pref']}config`;");
$doe = $conf['database']['db']->fetch($do,'array');

$do  = $conf['database']['db']->query("SELECT * FROM `{$conf['database']['pref']}menu`;");
$deo = $conf['database']['db']->fetch($do,'array');

$menu = array();
for ( $i=0; $i<sizeof($deo); $i++)
{
 // menu:link1 & menu:link2
 if ( @preg_match_all ( "#menu\:(link|url)(.*)=(.*)#", @$deo[$i]['menu'], $out ) )
 {
  if ( !isset ( $menu[$out[2][0]] ) )
	$menu[$out[2][0]] = array($out[1][0] => $out[3][0]); 
  Else
  {
    if ( $out[1][0] == "link" ) 
		$menu[$out[2][0]] = array($out[1][0] => $out[3][0], 'url' => @$menu[$out[2][0]]['url']); 
	else
		$menu[$out[2][0]] = array($out[1][0] => $out[3][0], 'link' => @$menu[$out[2][0]]['link']); 
  }
 }
}

$conf['site']['menu'] = null;
$conf['site']['menu-li'] = null;
$conf['site']['menu-l'] = null;

for ( $i=1; $i<sizeof($menu)+5; $i++) 
{
	if ( isset ( $menu[$i]['url'] ) && isset ( $menu[$i]['link'] ) )
		{
			$menu[$i]['url']	  = preg_replace("/\.pag/",null,$menu[$i]['url']);
			$conf['site']['menu'] .= '<a class=\'link\' href=\'' . $conf['site']['url'] . 'page/' . $menu[$i]['url'] . '\'>' . $menu[$i]['link'] . '</a><br>';
      $conf['site']['menu-l'] .= '<a class=\'link\' href=\'' . $conf['site']['url'] . 'page/' . $menu[$i]['url'] . '\'>' . $menu[$i]['link'] . '</a>&nbsp;-&nbsp;';
      $conf['site']['menu-li'] .= '<li><a class=\'link\' href=\'' . $conf['site']['url'] . 'page/' . $menu[$i]['url'] . '\'>' . $menu[$i]['link'] . '</a></li>';
		}
}

for ( $i=0; $i<sizeof($doe); $i++) 
{
 #replace = For Config;
 $val = explode("=",$doe[$i]['config']);
 
 #explode gb:extra
 $con = explode(":",$val[0]);
 
 #implode Them To Config
 $conf[$con[0]][$con[1]] = $val[1];

}
?>