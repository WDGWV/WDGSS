<?php
      ####################################################
      ####################################################
      ###                                              ###
      ###  # # # # # # # # # # # # # # # # # # # #     ###
      ###   # # # # # # # # # # # # # # # # # # # #    ###
      ###    # # # # # # # # # # # # # # # # # # # #   ###
      ###     #     WDGSS Required File     # # # # #  ###
      ###    # Please No Change In This File # # # #   ###
      ###   # # # # # # # # # # # # # # # # # # # #    ###
      ###  # # # # # # # # # # # # # # # # # # # #     ###
      ###                                              ###
      ####################################################
      ####################################################
      ### WARNING DO NOT EDIT THIS FILE, THAT MISMATCH ###
      ### THE USABILITY OF WDGSS, WE DO NOT GIVE ----- ###
      ### SUPPORT FOR EDITTED FILES!!!!!!!!!!!!!!!!!!! ###
      ####################################################
      ####################################################
	  ### STARTED BY: Wesley De Groot (wes@wdgss.nl)   ###
	  ### FILE VERSION: 6.0.0.1-25                     ###
	  ### WDGSS VERSION: 6.0.0.1 Final                 ###
      ####################################################
	  ### LAST EDIT BY: Wesley De Groot (wes@wdgss.nl) ###
	  ### LAST REVISION: 20:12 @ 15 / 09 / 2010        ###
	  ####################################################
	  ####################################################


if ( !defined ( 'in_wdgss' ) )
 {
  exit("You`ll Missed This Action");
 }

error_reporting(E_ALL);
define("wdgss_core_ver",'7.0');

include "include/inc.core.php";
include "include/inc.user.php";

$starttime = microtime();
$startarray = explode(" ", $starttime);
$starttime = $startarray[1] + $startarray[0];
define ( "nl", "\r\n" );
if ( function_exists ( "date_default_timezone_set" ) &&
     function_exists ( "date_default_timezone_get" ) )
{
  date_default_timezone_set( date_default_timezone_get( ) ) ;
}

function splitall($split,$spl="a-zA-Z0-9! \\\$\\<\\>\\|\\?\\\"':;\\.\\,\\:\\;\\{{\\}}\\(\\)\\[\\]")
{ 
  return explode("",substr(preg_replace("/([".$spl."])/",'\\1',$split),1));
}

function text2html ( $t ) 
  {
    $Arr = array(
`"=>96,"a"=>97,"b"=>98,"c"=>99,"d"=>100,"e"=>101,"f"=>102,"g"=>103,"h"=>104,"i"=>105,"j"=>106,"k"=>107,"l"=>108,"m"=>109,"n"=>110,"o"=>111,"p"=>112,"q"=>113,"r"=>114,"s"=>115,"t"=>116,"u"=>117,"v"=>118,"w"=>119,"x"=>120,"y"=>121,"z"=>122,"{"=>123,"|"=>124,"}"=>125,"~"=>126
    );
    $t = splitall($t);
    $a = null;
    for ( $i=0; $i<sizeof($t); $i++ )
      {
        $a .= ( ( isset ( $Arr [ $t [ $i ] ] ) ) ? ("&#" . $Arr [ $t [ $i ] ] . ";") : ( $t [ $i ] ) );
      }
    return $a;
}

function isin($what,$inco,$hl=false)
{
 $wrgx1 = $inco;
 $wrgx2 = $what;
    if ($hl == false)
    {
      if (stristr($wrgx1, $wrgx2))
      {
       return true;
      }
      else
      {
       return false;
      }
    }
    else
    {
      if (strstr($wrgx1, $wrgx2))
      {
       return true;
      }
      else
      {
       return false;
      }
    }
}
    
	function uniqueid()
	{
			  return ($unique = md5(uniqid(time()))); 
	}

if(!function_exists('uniqueid'))
{
	function uniqueid()
	{
			  return ($unique = md5(uniqid(time()))); 
	}
}

function metenter($string, $tekens, $begin=0,$total='NEW')  
{  
$aantal = strlen($string);
$stringo=$string;

if ($total=='NEW')
  {
  $total = strlen($string);
  }

if($aantal > $tekens)  
  {  
  $string = substr($stringo, $begin, $tekens) . "\r\n";
  }   

if ($total>1)
  {
  $string .= metenter($stringo, $tekens, $begin+$tekens, $total-$tekens);
  }
return $string;  
}

function debug($iets) 
{
  echo dump($iets);
}
 
function httpstatus($num,$return=false) {
    if ( isset ( $_SERVER['SERVER_PROTOCOL'] ) )
    {
      $protocol = $_SERVER['SERVER_PROTOCOL'];
    }
    else
    {
      $protocol = 'HTTP/1.1';
    }

   $http = array (
       '100' => $protocol . " 100 Continue",
       '101' => $protocol . " 101 Switching Protocols",
       '200' => $protocol . " 200 OK",
       '201' => $protocol . " 201 Created",
       '202' => $protocol . " 202 Accepted",
       '203' => $protocol . " 203 Non-Authoritative Information",
       '204' => $protocol . " 204 No Content",
       '205' => $protocol . " 205 Reset Content",
       '206' => $protocol . " 206 Partial Content",
       '300' => $protocol . " 300 Multiple Choices",
       '301' => $protocol . " 301 Moved Permanently",
       '302' => $protocol . " 302 Found",
       '303' => $protocol . " 303 See Other",
       '304' => $protocol . " 304 Not Modified",
       '305' => $protocol . " 305 Use Proxy",
       '307' => $protocol . " 307 Temporary Redirect",
       '400' => $protocol . " 400 Bad Request",
       '401' => $protocol . " 401 Unauthorized",
       '402' => $protocol . " 402 Payment Required",
       '403' => $protocol . " 403 Forbidden",
       '404' => $protocol . " 404 Not Found",
       '405' => $protocol . " 405 Method Not Allowed",
       '406' => $protocol . " 406 Not Acceptable",
       '407' => $protocol . " 407 Proxy Authentication Required",
       '408' => $protocol . " 408 Request Time-out",
       '409' => $protocol . " 409 Conflict",
       '410' => $protocol . " 410 Gone",
       '411' => $protocol . " 411 Length Required",
       '412' => $protocol . " 412 Precondition Failed",
       '413' => $protocol . " 413 Request Entity Too Large",
       '414' => $protocol . " 414 Request-URI Too Large",
       '415' => $protocol . " 415 Unsupported Media Type",
       '416' => $protocol . " 416 Requested range not satisfiable",
       '417' => $protocol . " 417 Expectation Failed",
       '500' => $protocol . " 500 Internal Server Error",
       '501' => $protocol . " 501 Not Implemented",
       '502' => $protocol . " 502 Bad Gateway",
       '503' => $protocol . " 503 Service Unavailable",
       '504' => $protocol . " 504 Gateway Time-out"       
   );
   if ( isset ( $http [ $num ] ) )
   {
    if ( $return == false )
    {
      if ( !headers_sent ( $file, $line ) ) 
      {
        header( $http [ $num ] ) ;
      }
      else
      {
        trigger_error ( 'headers Are sent In ' . $file . ' @ ' . $line, E_USER_ERROR ) ;
      }
    }
    else
    {
     return $http [ $num ] ;
    }
   }
}

function unzip ( $zip , $dir ) 
  {
    $zip = zip_open ( $zip ) ;
    if ( is_resource ( $zip ) ) 
      {
        while ( $zip_entry = zip_read ( $zip ) ) 
          {
            $fp = fopen ( $dir . zip_entry_name ( $zip_entry ) , "w" ) ;
            if ( zip_entry_open ( $zip , $zip_entry , "r" ) ) 
              {
                $buf = zip_entry_read ( $zip_entry , zip_entry_filesize ( $zip_entry ) ) ;
                fwrite ( $fp , $buf ) ;
                zip_entry_close ( $zip_entry ) ;
                fclose ( $fp ) ;
              }
          }
        zip_close ( $zip );
      }
  }
  
class zipfile 
{ 
    var $datasec      = array(); 
    var $ctrl_dir     = array(); 
    var $eof_ctrl_dir = "\x50\x4b\x05\x06\x00\x00\x00\x00"; 
    var $old_offset   = 0; 

    function unix2DosTime($unixtime = 0) 
    { 
        $timearray = ($unixtime == 0) ? getdate() : getdate($unixtime); 

        if ($timearray['year'] < 1980) 
        { 
            $timearray['year']    = 1980; 
            $timearray['mon']     = 1; 
            $timearray['mday']    = 1; 
            $timearray['hours']   = 0; 
            $timearray['minutes'] = 0; 
            $timearray['seconds'] = 0; 
        }

        return (($timearray['year'] - 1980) << 25) | ($timearray['mon'] << 21) | ($timearray['mday'] << 16) | 
                ($timearray['hours'] << 11) | ($timearray['minutes'] << 5) | ($timearray['seconds'] >> 1); 
    }
    function addFile($data, $name, $time = 0) 
    { 
        $name     = str_replace('\\', '/', $name); 
        $dtime    = dechex($this->unix2DosTime($time)); 
        $hexdtime = '\x' . $dtime[6] . $dtime[7] 
                  . '\x' . $dtime[4] . $dtime[5] 
                  . '\x' . $dtime[2] . $dtime[3] 
                  . '\x' . $dtime[0] . $dtime[1]; 
        eval('$hexdtime = "' . $hexdtime . '";'); 
        $fr   = "\x50\x4b\x03\x04"; 
        $fr   .= "\x14\x00";           
        $fr   .= "\x00\x00";          
        $fr   .= "\x08\x00";          
        $fr   .= $hexdtime;           
        $unc_len = strlen($data); 
        $crc     = crc32($data); 
        $zdata   = gzcompress($data); 
        $zdata   = substr(substr($zdata, 0, strlen($zdata) - 4), 2);
        $c_len   = strlen($zdata); 
        $fr      .= pack('V', $crc);             
        $fr      .= pack('V', $c_len);       
        $fr      .= pack('V', $unc_len);         
        $fr      .= pack('v', strlen($name));   
        $fr      .= pack('v', 0);               
        $fr      .= $name; 
        $fr .= $zdata; 
        $fr .= pack('V', $crc);                
        $fr .= pack('V', $c_len);              
        $fr .= pack('V', $unc_len);           
        $this -> datasec[] = $fr; 
        $new_offset        = strlen(implode('', $this->datasec)); 
        $cdrec = "\x50\x4b\x01\x02"; 
        $cdrec .= "\x00\x00";                
        $cdrec .= "\x14\x00";                
        $cdrec .= "\x00\x00";                
        $cdrec .= "\x08\x00";               
        $cdrec .= $hexdtime;           
        $cdrec .= pack('V', $crc);       
        $cdrec .= pack('V', $c_len);         
        $cdrec .= pack('V', $unc_len);       
        $cdrec .= pack('v', strlen($name) ); 
        $cdrec .= pack('v', 0 );            
        $cdrec .= pack('v', 0 );             
        $cdrec .= pack('v', 0 );            
        $cdrec .= pack('v', 0 );            
        $cdrec .= pack('V', 32 );           
        $cdrec .= pack('V', $this -> old_offset ); 
        $this -> old_offset = $new_offset; 
        $cdrec .= $name;       
        $this -> ctrl_dir[] = $cdrec; 
    }    
    function file() 
    { 
        $data    = implode('', $this -> datasec); 
        $ctrldir = implode('', $this -> ctrl_dir); 
        return 
            $data . 
            $ctrldir . 
            $this -> eof_ctrl_dir . 
            pack('v', sizeof($this -> ctrl_dir)) .
            pack('v', sizeof($this -> ctrl_dir)) . 
            pack('V', strlen($ctrldir)) .          
            pack('V', strlen($data)) .           
            "\x00\x00";                        
    }
}

function meta($smta=false) 
{
 return ($smta==false) ? setmeta() : setmeta($smta);
}

function setmeta($smta = array(
 "description" => "a website powered by wdgss",
 "keywords"    => "wdgss,wes,de,groot,site,system,woc,wocnl",
 "Author"      => "Wesley De Groot (WesDeGroot)",
 "Subject"     => "WesDeGroot Site System",
 "Title"       => "WesDeGroot Site System powered website",
 "Language"    => "dutch",
 "Robots"      => "all"
 ))
{

 $add=false;
 foreach ( $smta as $meta => $content ) 
 {
  $add .= "<META NAME=\"" . $meta . "\" CONTENT=\"" . $content . "\">\r\n";
 }
 //<meta http-equiv=content-type content="text/html; charset=UTF-8"> //OLD::iso-8859-15
 $addalso = "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-15\">\r\n" .
            "<meta http-equiv=\"X-UA-Compatible\" content=\"IE=7\">\r\n" .
            "<META HTTP-EQUIV=\"pragma\" CONTENT=\"no-cache\">\r\n" .
            "<META HTTP-EQUIV=\"CACHE-CONTROL\" CONTENT=\"NO-CACHE\">\r\n" .
            "<META HTTP-EQUIV=\"expires\" CONTENT=\"". date("D") . ", " . date("d") . " " . date("M") ." " . date("Y") . " " . date("H:i:s") ." GMT\">\r\n" .
            "<META NAME=\"Generator\" CONTENT=\"WesDeGroot Site System\">\r\n";
 
 return $addalso . $add . "\r\n\r\n";
}

function is_website () {
 if ( isset ( $_SERVER['SERVER_PROTOCOL'] ) ) 
 {
  return true;
 }
  else
 {
  return false;
 }
}
function is_console () {
 return is_website();
}
function dumpdebug($x=true,$st=true)
{
echo dump(array($x,$st));
}
function soficheck($sNr) 
{ 
    if (preg_match('[1-9]{1}[0-9]{8}',$sNr) && strlen($sNr) == 9) 
        { 
        $sofiCheck = 0; 
        
        for ($i=0;$i<9;$i++) 
           { 
           $x = 9 - $i; 
           if($x>1) 
              { 
              $sofiCheck += ($sNr{$i} * $x); 
              } 
           else 
              { 
              $sofiCheck -= ($sNr{$i} * $x); 
              } 
           } 
        if($sofiCheck % 11==0) 
            { 
            return true; 
            } 
        } 
        return false; 
}

function implode_r($glue, $array, $array_name = NULL)
{
  while(list($key,$value) = @each($array)) 
  {
    if(is_array($value)) 
    {
       $return[] = implode_r($glue, $value, (string) $key);
    }
    else
    {
       if($array_name != NULL)
       {
          $return[] = $array_name."[".(string) $key."]=".$value;
       }
       else
       {
          $return[] = $key."=".$value;
       }
    }
  }
  
if(isset($return)) 
  {
    return(implode($glue, $return));
  }
  else
  {
   return 'error';
  }
}


function ccode($codde) 
{
ob_start();
$r=highlight_string($codde);
$r=ob_get_contents();
ob_end_clean();
$r = str_replace(array('<?php','&lt;?php','<?','&lt;?','?>','?&gt;'),'',$r);
return $r;
}

  function getStandardPort($scheme)
    {
        switch (strtolower($scheme)) 
        {
            case 'echo':     return    7;
            case 'daytime':  return   13;
            case 'ftpd':     return   20;
            case 'ftp':      return   21;
            case 'ftpc':     return   21;
            case 'ssh':      return   22;
            case 'telnet':   return   23;
            case 'smtp':     return   25;           
            case 'dns':      return   53;
            case 'http':     return   80;
            case 'kerberos': return   88;
            case 'pop3':     return  110;
            case 'nbns':     //See_Down.;
            case 'netbios':  //See_Down.;
            case 'nbn':      return  137;
            case 'imap':     return  143;
            case 'ldap':     return  389;
            case 'https':    return  443;
            case 'sftp':     return  990;
            case 'imaps':    return  993;
            case 'pop3s':    return  995;
            case 'msn':      //See_Down.;
            case 'wlm':      return 1863;
            case 'mqsql':    return 3306;
            case 'remote':   return 7539;
            case 'irc':      return 6667;          
            default:         return null;
       }
    }    

function implode2($glue1, $glue2, $array)
{
    return ((sizeof($array) > 2)? implode($glue1, array_slice($array, 0, -2)).$glue1 : "").implode($glue2, array_slice($array, -2));
}

function warray_fill($iStart, $iLen, $vValue) 
{
    $aResult = array();
    for ($iCount = $iStart; $iCount < $iLen + $iStart; $iCount++) 
    {
        $aResult[$iCount] = $vValue;
    }
    return $aResult;
}

function dump($orgvar = NULL, $depth = 0, $firstcall = true, $objdepth = 0)
{
   // first check if the variable has already been parsed
    $keyvar = 'the_elegant_dump_recursion_protection_scheme';
	
	//Anti recursie
    if (is_array($orgvar) && isset($orgvar[$keyvar])) 
    {
        // the passed variable is already being parsed!
        $real_var=&$orgvar[$keyvar];
        $type=gettype($real_var);
		$recursed = 'Recursion!';
    }
    else
    {
      if($objdepth > 3)
      {
        $recursed = 'Copy of Object printed 3 times.';
      }
      else
      {
        $recursed = false;
      }
    }
		
	
	$var=array($keyvar=>$orgvar);
	$var=$var[$keyvar];
	
	
	// we will insert an elegant parser-stopper
		
	$type = gettype($var);
	
	$c['bg'] = 		  ini_get('highlight.bg');
	$c['comment'] = ini_get('highlight.comment');
	$c['default'] = ini_get('highlight.default');
	$c['html'] = 	  ini_get('highlight.html');
	$c['keyword'] = ini_get('highlight.keyword');
	$c['string'] = 	ini_get('highlight.string');
	
	$sp = @implode('', warray_fill(0, $depth, '&nbsp;&nbsp;&nbsp;&nbsp;'));
	
	if(is_resource($var) || $type == 'resource') 
	{
		if(get_resource_type($var) == 'stream') 
		{
			$streamData = stream_get_meta_data($var);
			$ret = '<span style="color: '.$c['keyword'].';">Recource: </span><strong style="color: '.$c['html'].';">Stream</strong> '.dump($streamData, $depth+1, false);
		}
		else
		{
			$ret = '<span style="color: '.$c['keyword'].';">Recource: </span><strong style="color: '.$c['html'].';">' . ucfirst(get_resource_type($var)).'</strong>';
	  }
	}
	elseif (is_array($var) || $type == 'array')
	{
		$depth++;
		$i = count($var);
		
		$uniqueId = rand();
				
		if($i && !$recursed) 
		{
		
			if(!$firstcall && $i > 2) 
			{
				$default_state = 'none';
				$dots = '...';
			}
			else 
			{
				$default_state = 'inline';
				$dots = '';
			}
				
			$ret = '<a href="#" style="color: '.$c['default'].'; text-decoration: none;" onclick="arr = document.getElementById(\'arr_'.$uniqueId.'\'); dots = document.getElementById(\'dots_'.$uniqueId.'\'); if(arr.style.display == \'none\') {arr.style.display = \'inline\'; dots.innerHTML = \'\'} else {arr.style.display = \'none\'; dots.innerHTML = \'...\'} this.blur(); return false;">array</a> <span style="color: '.$c['html'].';">(</span>';
			$ret .= '<code style="display: '.$default_state.';" id="arr_'.$uniqueId.'"><br>';
			$sp = $sp . '&nbsp;&nbsp;&nbsp;&nbsp;';
			
			
			foreach($var as $k => &$v) 
			{
				$ret .= $sp . '<span style="color: '.$c['default'].';">[</span>'.dump($k, false, false).'<span style="color: '.$c['default'].';">] => </span>' . dump($v, $depth, false);
				$ret .= ($i-- > 1 ? '<span style="color: '.$c['html'].';">,</span>' : '').'<br>';			
			}
			$depth--;
			$sp = @implode('', warray_fill(0, $depth, '&nbsp;&nbsp;&nbsp;&nbsp;'));
	
			$ret .= $sp . '</code><span style="color: '.$c['html'].';" id="dots_'.$uniqueId.'" >'.$dots.'</span><span style="color: '.$c['html'].';">)</span>';
		}
		else
		{
		$ret = '<span style="color: '.$c['default'].';">array </span> <span style="color: '.$c['html'].';">( '.($recursed ? '<strong style="color: red;">'.$recursed.'</strong>' : '' ).' )</span>';
		}
	}
	elseif (is_bool($var) || $type == 'bool') 
	{
		$ret = '<span style="color: '.$c['keyword'].';">' . ($var ? 'true' : 'false') . '</span>';
	}
	elseif (is_float($var) || is_int($var) || is_numeric($var) || $type == 'double' || $type == 'integer') 
	{
		$ret = '<span style="color: '.$c['string'].';">' . text2html($var) . '</span>';
	}
	elseif (is_object($var) || $type == 'object') 
	{
	
		$vars = get_object_vars($var);
		$methods = get_class_methods($var);
		
		// Bouw stamboom op
		$tmp = $var;
		$parents = array();
		while($tmp = get_parent_class($tmp)) 
		{
			$parents[] = $tmp;
		}
		
		$tree = implode(' -> ', array_merge($parents, array(get_class($var))));

		$depth++;
		$i = count($vars) + count($methods);
		
		$uniqueId = rand();
		
		if($i && !$recursed) 
		{
			$ret = '<a href="#" style="color: '.$c['keyword'].'; text-decoration: none;" onclick="obj = document.getElementById(\'obj_'.$uniqueId.'\'); dots = document.getElementById(\'dots_'.$uniqueId.'\'); if(obj.style.display == \'none\') {obj.style.display = \'inline\'; dots.innerHTML = \'\'} else {obj.style.display = \'none\'; dots.innerHTML = \'...\'} this.blur(); return false;">Object: <span style="color: '.$c['default'].';">'. $tree . '</span></a> <span style="color: '.$c['html'].';">{</span>';
				
			if(!$firstcall && $i > 2) 
			{
				$default_state = 'none';
				$dots = '...';
			}
			else
			{
				$default_state = 'inline';
				$dots = '';
			}
			
			$ret .= '<code style="display: '.$default_state.';" id="obj_'.$uniqueId.'"><br>';
			$sp = $sp . '&nbsp;&nbsp;&nbsp;&nbsp;';
			
			$objdepth++;
			
			foreach($vars as $k => &$v)
			{
				$ret .= $sp . '<span style="color: '.$c['default'].';">[</span>'.dump($k, false, false).'<span style="color: '.$c['default'].';">] => </span>' . dump($v, $depth, false, $objdepth);
				$ret .= ($i-- > 1 ? '<span style="color: '.$c['html'].';">,</span>' : '').'<br>';	
			}
			
			foreach($methods as $k => $v)
			{
				$ret .= $sp . '<span style="color: '.$c['default'].';">function</span> <span style="color: '.$c['html'].';">' . $v .'()</span>';
				$ret .= ($i-- > 1 ? '<span style="color: '.$c['html'].';">,</span>' : '').'<br>';			
			}
			$depth--;
			$sp = @implode('', warray_fill(0, $depth, '&nbsp;&nbsp;&nbsp;&nbsp;'));
	
			$ret .= $sp . '</code><span id="dots_'.$uniqueId.'" style="color: '.$c['html'].'">'.$dots.'</span><span style="color: '.$c['html'].';">}</span>';
		}
		else
		{
			$ret = '<span style="color: '.$c['keyword'].';">Object: </span><span style="color: '.$c['default'].';">'. $tree . '</span> <span style="color: '.$c['html'].';">{ '.($recursed ? '<strong style="color: red;">'.$recursed.'</strong>' : '' ).' }</span>';
		}
	

	}
	elseif (is_string($var) || $type == 'string')
	{
		$ret = '<span style="color: '.$c['string'].';">\'' . text2html($var) . '\'</span>';
	}
	elseif (is_null($var) || $type == 'NULL') 
	{
		$ret = '<span style="color: '.$c['keyword'].';">NULL</span>';
	}
	else
	{
		$ret = '<strong style="color: red;">Unknown: </strong><span style="color: '.$c['html'].';">' . gettype($var) . '</span>';
	}
	
	if($firstcall) 
	{
		return '<code style="display: block; background-color: '.$c['bg'].'; border: 1px solid black; padding: 5px; margin: 5px;">'.$ret.'</code>';
	}
	else
	{
		return $ret;
  }
}

function session_started()
{
 if ( isset ( $_SESSION ) )
 {
  return true;
 }
 else
 {
  return false;
 }
}

function groote($size, $round = 0)
{ 
    $sizes = array('B', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'); 
    for ($i=0; $size > 1024 && $i < count($sizes) - 1; $i++) $size /= 1024; 
    return round($size,$round).$sizes[$i]; 
} 

function flip ( $array ) 
{
 return array_flip ( $array ) ;
}

function pb2l($birth_date) 
{

 $ex = explode ( "-", date ( "d-m-Y" ) );
 $xe = explode ( "-", $birth_date      );
 
 $leeftijd = $ex[2] - $xe[2];
 
 if ( $xe[1] > $ex[1] ) 
 {
  $leeftijd--;
 }
 
 if ( $xe[1] == $ex[1] )
 {
   if ( $xe[0] > $ex[0] ) 
   {
    $leeftijd--;
   }
 }
  
 return $leeftijd;
}


function str_reverse( $tr )
{
  return strrev($tr);
}

function md55($t)
{
	if ( isset ( $conf['site']['higsecurity'] ) )
	    return wcode ( $t, 'encode', wcode ( $t, 'encode' ) ) ;
	else
		return wcode ( $t, 'encode' ) ;
}

function wcode( $c, $e, $str='wdg' )
{
 if ( $e == 'e' Or $e == 'encode' )
 {
  return(xwenc($c,$str));
 }
 else
 {
  return(xwdec($c,$str));
 }
}

//functie die een string omzet in binair.
function str2bin($str) {
    $array = str_split($str,1);
    $bin = '';
    foreach($array as $chr) {
        $bin.=decbin_fix(ord($chr));
    }
    return $bin;
}

//functie die een binaire string omzet in een string.
function bin2str($bin) {
    $array = str_split($bin,8);
    $str = '';
    foreach($array as $chr) {
        $str.=chr(bindec($chr));
    }
    return $str;
}

//functie die een getal omzet in een binair getal en deze links aanvult met het opgegeven aantal 0-en.
function decbin_fix($int,$length = 8) {
    return str_pad(decbin($int),$length,'0',STR_PAD_LEFT);
}

function livc_hex2bin($hex) {
    $hex = str_split($hex,1);
    $bin = '';
    foreach($hex as $h) {
        $bin.=str_pad(base_convert($h,16,2),4,'0',STR_PAD_LEFT);
    }
    return $bin;
}

function bin_encrypt($bin,$password) {
    if($password == '') {
        return $bin;
    }
    $password = livc_hex2bin(md5($password));
    $bin = str_split($bin,1);
    $password = str_split($password,1);
    $pcp = 0;//password cursor position
    $bcp = 0;//binairy cursor position
    while($bcp<count($bin)) {
        if($pcp<count($password)) {
            $pcp ++;
        } else {
            $pcp = 0;
        }
        if(@$password[$pcp]=='1' && $bin[$bcp]=='0') {
            $bin[$bcp] = '1';
        } elseif(@$password[$pcp]=='1' && $bin[$bcp]=='1') {
            $bin[$bcp] = '0';
        }
        $bcp ++;
    }
    $bin = array_reduce($bin,'merge');
    return $bin;
}

function merge($a,$b) {
    return $a.$b;
}

function str_encrypt($str,$password) {
    return bin2str(bin_encrypt(str2bin($str),$password));
}

function xwenc($i,$p='wdg')
{
    $_POST['input']=$i;
    $_POST['password']=$p;
    return str_encrypt(stripslashes($_POST['input']),stripslashes($_POST['password']));
}

function xwdec($i,$p='wdg') {
    return xwenc(xwenc(xwenc($i,$p),$p),$p);
}    

if(!function_exists('uniqueid'))
{
	function uniqueid()
	{
			  return ($unique = md5(uniqid(time()))); 
	}
}


function spliturl($url) {
	preg_match("#((h|H)(t|T)(t|T)(p|P):\/\/)(.+?)\/(.*)#",$url,$p);
	if ( isset ( $p[6] ) ) {
		$p[6] = explode(':',$p[6]);
	}
	else
	{
		$p[6][0] = 'Error';
	}
	
	if(!isset($p[7]))
	{
		$p[7] = 'Error';
	}
	
	if ( isset ( $p[6][1] ) )
	{
		$port = $p[6][1];
	}
	else
	{
		$port = 80;
	}
	$p[6] = $p[6][0];
	return array(
		$p[6],
		$p[7],
		$port,
		'host' => $p[6],
		'url'  => $p[7],
		'port' => $port
	);
}


function b2l($birth_date) 
{

 $ex = explode ( "-", date ( "d-m-Y" ) );
 $xe = explode ( "-", $birth_date      );
 
 $leeftijd = $ex[2] - $xe[2];
 
 if ( $xe[1] > $ex[1] ) 
 {
  $leeftijd--;
 }
 
 if ( $xe[1] == $ex[1] )
 {
   if ( $xe[0] > $ex[0] ) 
   {
    $leeftijd--;
   }
 }
  
 return $leeftijd;
}

function replace($text,$array,$func='preg') 
{
  foreach ($array as $r1 => $r2) 
  {
    switch ($func) 
    {
     case 'preg':
        $text = preg_replace($r1,$r2,$text);
     break;
     case 'ereg':
        $text = ereg_replace($r1,$r2,$text);
     break;
     case 'preg_match':
        $text = preg_match_replace($r1,$r2,$text);
     break;
     case 'str':
        $text = str_replace($r1,$r2,$text);
     break;
    }
  }
  return $text;
}
 
function is_even($number)
{
 return(!($number & 1));
}

function zip($name,$files)
{
  if ( is_array ($files) ) 
  {
      $naam = $name.'.zip';
    header("Content-Type: application/octetstream");
    header("Content-Type: application/octet-stream");
    header('Content-Disposition: attachment; filename='.$naam);
    header('Pragma: public');
      $zip = new zipfile; 
      foreach ($files as $file=>$isin)
      {
       $zip->addFile($isin,$file);
      }
      echo $zip->file($naam);        
  }
  else
  {
  echo " File Is Not A Array E.x. array(\"filename1\" => \"thisisinthefile\")";
  }
  
  exit;
}
function ccooddee ( $code,$ret=true ) 
{
  ob_start();
  $ob = highlight_string("<?php\r\n" . $code . "\r\n?>");
  $ob = ob_get_contents();
  ob_end_clean();

  $ob = str_replace (array( "&lt;?php","?&gt;","\r","\n" ), array(''),$ob);
  if ($ret == false)
  {
    echo $ob . "\r\n";
  }
  else
  {
    return $ob . "\r\n";
  }
}

function getuploaderror($code)
{
  switch ($code)
  {
    case 'UPLOAD_ERR_OK':
    case 0:
      return 'Er zijn geen fouten opgetreden';
    break;

    case 'UPLOAD_ERR_INI_SIZE':
    case 1:
      return 'Het bestand is groter dan de ingestelde waarde voor upload_max_file in php.ini';
    break;
    
    case 'UPLOAD_ERR_FORM_SIZE':
    case 2:
      return 'Het bestand is groter dan de in de HTML opgegeven MAX_FILE_SIZE waarde';
    break;
    
    case 'UPLOAD_ERR_PARTIAL':
    case 3:
      return 'Het bestand is niet geheel geupload';
    break;
    
    case 'UPLOAD_ERR_NO_FILE':
    case 4:
      return 'Er is geen bestand geupload ';
    break;

    case 'UPLOAD_ERR_NO_TMP_DIR':
    case 6:
      return 'kon de directory voor het tijdelijke bestand niet vinden.';
    break;
    
    case 'UPLOAD_ERR_CANT_WRITE':
    case 7:
      return 'kon het tijdelijke bestand niet wegschrijven';
    break;
  }
}

function httperror($errno,$red=false,$renew=false,$ttff=false) {

httpstatus($errno);

if ( $red != false ) 
{
 if ($renew == false) 
 {
 go ( $red ) ;
 }
 else
 {
 renew ( $renew, $red, $ttff );
 }
}
      
$http=httpstatus($errno,true);

$expl=explode(" ",$http);
unset($expl[0],$expl[1]);
$desc=implode(' ',$expl);

if(isset($_SERVER['REQUEST_URI']))
{
  $thispage = "\"" . $_SERVER['REQUEST_URI'] . "\"";
}
else
{
  $thispage = "This Page";
}

echo "<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">" . nl .
     "<HTML>" . nl .
     "<HEAD>" . nl .
     "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-15\">" . nl .
     "<META HTTP-EQUIV=\"pragma\" CONTENT=\"no-cache\">" . nl .
     "<META HTTP-EQUIV=\"CACHE-CONTROL\" CONTENT=\"NO-CACHE\">" . nl .
     "<META HTTP-EQUIV=\"expires\" CONTENT=\"" . date("D, d M Y H:i:s") . " GMT\">" . nl .
     "<META NAME=\"Generator\" CONTENT=\"WesDeGroot Site System\">" . nl .
     "<META NAME=\"Robots\" CONTENT=\"none\">" . nl .
     "<TITLE>" . $errno . " " . $desc . "</TITLE>" . nl .
     "</HEAD>" . nl .
     "<BODY>" . nl .
     "<H1>" . $desc . "</H1>" . nl .
     "There Is A Error Occurred While Loading " . $thispage . ".<P>" . nl .
     "<HR>" . nl .
     "<ADDRESS>WesDeGroot Site System - &copy; 2001-" . date("Y") . " WesDeGroot Projects.</ADDRESS>" . nl .
     "</BODY>" . nl .
     "</HTML>";

if (!isset($_GET['noexit']) && !isset($_GET['wdgsshelp']) && !isset($_GET['ID'])) 
{
  exit();
}

}

?>